name: Release
on:
  push:
    branches:
      - 'main'
    tags:
      - 'v*.*.*'
env:
  DEBUG: napi:*
  APP_NAME: es-git
  MACOSX_DEPLOYMENT_TARGET: '10.13'
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin
            build: yarn build --target x86_64-apple-darwin
          - host: macos-latest
            target: aarch64-apple-darwin
            build: yarn build --target aarch64-apple-darwin
          - host: windows-latest
            target: x86_64-pc-windows-msvc
            build: yarn build --target x86_64-pc-windows-msvc
          - host: windows-latest
            target: aarch64-pc-windows-msvc
            build: yarn build --target aarch64-pc-windows-msvc
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian
            build: yarn build --target x86_64-unknown-linux-gnu
          - host: ubuntu-latest
            target: x86_64-unknown-linux-musl
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
            build: |-
              # `perl` needs for building openssl
              set -e &&
              apk add perl &&
              yarn build
          - host: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian-aarch64
            build: |-
              # `perl` needs for building openssl
              set -e &&
              apt-get update &&
              apt-get install -y perl &&
              unset CC_aarch64_unknown_linux_gnu &&
              unset CXX_aarch64_unknown_linux_gnu &&
              yarn build --target aarch64-unknown-linux-gnu
          - host: ubuntu-latest
            target: aarch64-unknown-linux-musl
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
            build: |-
              # `perl` needs for building openssl
              set -e &&
              apk add perl &&
              rustup target add aarch64-unknown-linux-musl &&
              yarn build --target aarch64-unknown-linux-musl
          - host: ubuntu-latest
            target: aarch64-linux-android
            build: yarn build --target aarch64-linux-android
          - host: ubuntu-latest
            target: armv7-linux-androideabi
            build: yarn build --target armv7-linux-androideabi
    name: stable - ${{ matrix.settings.target }}
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        if: ${{ !matrix.settings.docker }}
        with:
          node-version-file: ".node-version"
          check-latest: true
          cache: yarn
      - name: Install rust
        uses: dtolnay/rust-toolchain@stable
        if: ${{ !matrix.settings.docker }}
        with:
          toolchain: stable
          targets: ${{ matrix.settings.target }}
      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            .cargo-cache
            target/
          key: ${{ matrix.settings.target }}-cargo-${{ matrix.settings.host }}
      - name: Install dependencies
        run: yarn install
      - name: Build in docker
        uses: addnab/docker-run-action@v3
        if: ${{ matrix.settings.docker }}
        with:
          image: ${{ matrix.settings.docker }}
          options: '--user 0:0 -v ${{ github.workspace }}/.cargo-cache/git/db:/usr/local/cargo/git/db -v ${{ github.workspace }}/.cargo/registry/cache:/usr/local/cargo/registry/cache -v ${{ github.workspace }}/.cargo/registry/index:/usr/local/cargo/registry/index -v ${{ github.workspace }}:/build -w /build'
          run: ${{ matrix.settings.build }}
      - name: Build
        run: ${{ matrix.settings.build }}
        if: ${{ !matrix.settings.docker }}
        shell: bash
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: ${{ env.APP_NAME }}.*.node
          if-no-files-found: error
  release:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
      deployments: write
    needs:
      - build
    outputs:
      published: ${{ steps.check-publish.outputs.published }}
    steps:
      - uses: actions/checkout@v4
      - name: Fetch git tags
        run: git fetch origin 'refs/tags/*:refs/tags/*'
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version-file: ".node-version"
          check-latest: true
          cache: yarn
      - name: Install dependencies
        run: yarn install
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts
      - name: Prepare next release
        if: github.ref_type == 'branch'
        run: node --no-warnings=ExperimentalWarning --experimental-strip-types ./.scripts/prepare-next-release.ts ${{ github.run_number }} ${{ github.sha }}
      - name: Create npm dirs
        run: yarn napi create-npm-dir -t .
      - name: Move artifacts
        run: yarn napi artifacts -d release-artifacts
      - name: List packages
        run: ls -R ./npm
        shell: bash
      - id: extract-changelog
        uses: dahlia/submark@5a5ff0a58382fb812616a5801402f5aef00f90ce
        with:
          input-file: CHANGELOG.md
          heading-level: 2
          heading-title-text: version ${{ github.ref_name }}
          ignore-case: true
          omit-heading: true
      - run: 'cat ${{ steps.extract-changelog.outputs.output-file }}'
      - name: Release
        id: gh-release
        uses: softprops/action-gh-release@v2
        if: github.ref_type == 'tag'
        with:
          body_path: ${{ steps.extract-changelog.outputs.output-file }}
          repository: toss/es-git
          generate_release_notes: false
          token: ${{ github.token }}
      - name: Publish
        id: publish
        run: |
          set -ex
          npm config set provenance true
          npm config set //registry.npmjs.org/:_authToken "$NPM_AUTH_TOKEN"
          npm config set access public
          npm whoami
          if [[ "$GITHUB_REF_TYPE" = "tag" ]]; then
            yarn napi prepublish -t npm --gh-release-id ${{ steps.gh-release.outputs.id }}
            npm publish --access public
          elif [[ "$GITHUB_REF_TYPE" = "branch" ]]; then
            npm config set tag next
            yarn napi prepublish -t npm --skip-gh-release
            npm publish --access public --tag next
          else
            echo "Skip publish"
          fi
        env:
          GITHUB_TOKEN: ${{ github.token }}
          NPM_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Check if publish happened and is latest
        id: check-publish
        run: |
          if [[ "$GITHUB_REF_TYPE" = "tag" ]]; then
            # Check if this is the latest version
            LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1`)
            if [[ "$GITHUB_REF_NAME" == "$LATEST_TAG" ]]; then
              echo "published=true" >> $GITHUB_OUTPUT
            else
              echo "published=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "published=false" >> $GITHUB_OUTPUT
          fi
  publish-documentation-site:
    runs-on: ubuntu-latest
    needs:
      - release
    if: needs.release.outputs.published == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version-file: ".node-version"
          check-latest: true
          cache: yarn
      - name: Install dependencies
        run: yarn install
      - name: Install Vercel CLI
        run: yarn global add vercel
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
